var E=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var m=E((q,b)=>{b.exports={name:"dotenv",version:"16.4.5",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},funding:"https://dotenvx.com",keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3",decache:"^4.6.1",sinon:"^14.0.1",standard:"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0",tap:"^16.3.0",tar:"^6.1.11",typescript:"^4.8.4"},engines:{node:">=12"},browser:{fs:!1}}});var N=E((M,u)=>{var g=require("fs"),v=require("path"),w=require("os"),k=require("crypto"),I=m(),h=I.version,V=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function O(e){let t={},r=e.toString();r=r.replace(/\r\n?/mg,`
`);let a;for(;(a=V.exec(r))!=null;){let o=a[1],n=a[2]||"";n=n.trim();let s=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),s==='"'&&(n=n.replace(/\\n/g,`
`),n=n.replace(/\\r/g,"\r")),t[o]=n}return t}function T(e){let t=_(e),r=i.configDotenv({path:t});if(!r.parsed){let s=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw s.code="MISSING_DATA",s}let a=D(e).split(","),o=a.length,n;for(let s=0;s<o;s++)try{let c=a[s].trim(),l=$(r,c);n=i.decrypt(l.ciphertext,l.key);break}catch(c){if(s+1>=o)throw c}return i.parse(n)}function A(e){console.log(`[dotenv@${h}][INFO] ${e}`)}function j(e){console.log(`[dotenv@${h}][WARN] ${e}`)}function p(e){console.log(`[dotenv@${h}][DEBUG] ${e}`)}function D(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function $(e,t){let r;try{r=new URL(t)}catch(c){if(c.code==="ERR_INVALID_URL"){let l=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw l.code="INVALID_DOTENV_KEY",l}throw c}let a=r.password;if(!a){let c=new Error("INVALID_DOTENV_KEY: Missing key part");throw c.code="INVALID_DOTENV_KEY",c}let o=r.searchParams.get("environment");if(!o){let c=new Error("INVALID_DOTENV_KEY: Missing environment part");throw c.code="INVALID_DOTENV_KEY",c}let n=`DOTENV_VAULT_${o.toUpperCase()}`,s=e.parsed[n];if(!s){let c=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${n} in your .env.vault file.`);throw c.code="NOT_FOUND_DOTENV_ENVIRONMENT",c}return{ciphertext:s,key:a}}function _(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(let r of e.path)g.existsSync(r)&&(t=r.endsWith(".vault")?r:`${r}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=v.resolve(process.cwd(),".env.vault");return g.existsSync(t)?t:null}function y(e){return e[0]==="~"?v.join(w.homedir(),e.slice(1)):e}function x(e){A("Loading env from encrypted .env.vault");let t=i._parseVault(e),r=process.env;return e&&e.processEnv!=null&&(r=e.processEnv),i.populate(r,t,e),{parsed:t}}function K(e){let t=v.resolve(process.cwd(),".env"),r="utf8",a=!!(e&&e.debug);e&&e.encoding?r=e.encoding:a&&p("No encoding is specified. UTF-8 is used by default");let o=[t];if(e&&e.path)if(!Array.isArray(e.path))o=[y(e.path)];else{o=[];for(let l of e.path)o.push(y(l))}let n,s={};for(let l of o)try{let d=i.parse(g.readFileSync(l,{encoding:r}));i.populate(s,d,e)}catch(d){a&&p(`Failed to load ${l} ${d.message}`),n=d}let c=process.env;return e&&e.processEnv!=null&&(c=e.processEnv),i.populate(c,s,e),n?{parsed:s,error:n}:{parsed:s}}function Y(e){if(D(e).length===0)return i.configDotenv(e);let t=_(e);return t?i._configVault(e):(j(`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`),i.configDotenv(e))}function L(e,t){let r=Buffer.from(t.slice(-64),"hex"),a=Buffer.from(e,"base64"),o=a.subarray(0,12),n=a.subarray(-16);a=a.subarray(12,-16);try{let s=k.createDecipheriv("aes-256-gcm",r,o);return s.setAuthTag(n),`${s.update(a)}${s.final()}`}catch(s){let c=s instanceof RangeError,l=s.message==="Invalid key length",d=s.message==="Unsupported state or unable to authenticate data";if(c||l){let f=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw f.code="INVALID_DOTENV_KEY",f}else if(d){let f=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw f.code="DECRYPTION_FAILED",f}else throw s}}function R(e,t,r={}){let a=!!(r&&r.debug),o=!!(r&&r.override);if(typeof t!="object"){let n=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw n.code="OBJECT_REQUIRED",n}for(let n of Object.keys(t))Object.prototype.hasOwnProperty.call(e,n)?(o===!0&&(e[n]=t[n]),a&&p(o===!0?`"${n}" is already defined and WAS overwritten`:`"${n}" is already defined and was NOT overwritten`)):e[n]=t[n]}var i={configDotenv:K,_configVault:x,_parseVault:T,config:Y,decrypt:L,parse:O,populate:R};u.exports.configDotenv=i.configDotenv;u.exports._configVault=i._configVault;u.exports._parseVault=i._parseVault;u.exports.config=i.config;u.exports.decrypt=i.decrypt;u.exports.parse=i.parse;u.exports.populate=i.populate;u.exports=i});var{DynamoDBClient:S}=require("@aws-sdk/client-dynamodb"),{DynamoDBDocumentClient:B,ScanCommand:C}=require("@aws-sdk/lib-dynamodb");N().config();var U=new S,F=B.from(U);exports.handler=async e=>{try{let t={TableName:"Bookings"},r=await F.send(new C(t));if(!r.Items||r.Items.length===0)return{statusCode:404,body:JSON.stringify({message:"No bookings found in the Bookings table."})};let a=r.Items.map(o=>({BookingId:o.BookingId||"Unknown",checkIn:o.checkIn||"Unknown",checkOut:o.checkOut||"Unknown",guests:o.guests||0,rooms:o.rooms||[],name:o.name||"Unknown"}));return a.sort((o,n)=>new Date(o.checkIn)-new Date(n.checkIn)),{statusCode:200,body:JSON.stringify({message:"Success",bookings:a})}}catch(t){return console.error("Error retrieving bookings:",t),{statusCode:500,body:JSON.stringify({message:"Error retrieving bookings.",error:t.message})}}};
//# sourceMappingURL=index.js.map
